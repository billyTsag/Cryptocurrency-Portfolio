@model IEnumerable<CryptoFolio.ViewModels.MyTransactionsViewModel>
@{
    ViewBag.Title = "View My Portfolio";
}




<table id="js-filter" class="table table-striped table-hover table-dark">
    <thead>
        <tr>
            <th><a href="javascript:SortTable(0,'T');">Name</a></th>
            <th><a href="javascript:SortTable(1,'N');">Quantity</a></th>
            <th><a href="javascript:SortTable(2,'N');">Price</a></th>
            <th><a href="javascript:SortTable(3,'N');">Current Value</a></th>
           
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td class="coinName">@item.CoinName</td>
                <td class="coinQuantity">@item.Quantity</td>
                <td class="coinPrice"></td>
                <td class="coinValue"></td>

            </tr>
        }

        <button class="btn btn-warning">@Html.ActionLink("Add Transaction", "CreateBuyTransaction", "Transaction", null, new { })</button>
    </tbody>
</table>

<script>
    let DOMcoinName = document.getElementsByClassName('coinName');
    let DOMcoinPrice = document.getElementsByClassName('coinPrice');
    let DOMcoinValue = document.getElementsByClassName('coinValue');
    let DOMcoinQuantity = document.getElementsByClassName('coinQuantity');
    
    const url = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&page=1&sparkline=false';
    fetch(url)
        .then((response) => response.json())
        .then(function (data) {
            const coins = Object.entries(data);
            return coins.map(function (coin) {                
                let info = Object.entries(coin[1]);     
                let coinName = info[2][1];
                let coinPrice = info[4][1];
                for (var i = 0; i < DOMcoinName.length; i++) {
                    if (DOMcoinName[i].innerHTML == coinName) {
                        DOMcoinPrice[i].innerHTML = coinPrice;
                        DOMcoinValue[i].innerHTML = coinPrice * parseInt(DOMcoinQuantity[i].innerHTML);
                    }
                } 
            })
        });

    var TableIDvalue = "js-filter";
    var TableLastSortedColumn = -1;
    function SortTable() {
        var sortColumn = parseInt(arguments[0]);
        var type = arguments.length > 1 ? arguments[1] : 'T';
        var dateformat = arguments.length > 2 ? arguments[2] : '';
        var table = document.getElementById(TableIDvalue);
        var tbody = table.getElementsByTagName("tbody")[0];
        var rows = tbody.getElementsByTagName("tr");
        var arrayOfRows = new Array();
        type = type.toUpperCase();
        dateformat = dateformat.toLowerCase();
        for (var i = 0, len = rows.length; i < len; i++) {
            arrayOfRows[i] = new Object;
            arrayOfRows[i].oldIndex = i;
            var celltext = rows[i].getElementsByTagName("td")[sortColumn].innerHTML.replace(/<[^>]*>/g, "");
            if (type == 'D') { arrayOfRows[i].value = GetDateSortingKey(dateformat, celltext); }
            else {
                var re = type == "N" ? /[^\.\-\+\d]/g : /[^a-zA-Z0-9]/g;
                arrayOfRows[i].value = celltext.replace(re, "").substr(0, 25).toLowerCase();
            }
        }
        if (sortColumn == TableLastSortedColumn) { arrayOfRows.reverse(); }
        else {
            TableLastSortedColumn = sortColumn;
            switch (type) {
                case "N": arrayOfRows.sort(CompareRowOfNumbers); break;
                case "D": arrayOfRows.sort(CompareRowOfNumbers); break;
                default: arrayOfRows.sort(CompareRowOfText);
            }
        }
        var newTableBody = document.createElement("tbody");
        for (var i = 0, len = arrayOfRows.length; i < len; i++) {
            newTableBody.appendChild(rows[arrayOfRows[i].oldIndex].cloneNode(true));
        }
        table.replaceChild(newTableBody, tbody);
    } // function SortTable()

    function CompareRowOfText(a, b) {
        var aval = a.value;
        var bval = b.value;
        return (aval == bval ? 0 : (aval > bval ? 1 : -1));
    } // function CompareRowOfText()

    function CompareRowOfNumbers(a, b) {
        var aval = /\d/.test(a.value) ? parseFloat(a.value) : 0;
        var bval = /\d/.test(b.value) ? parseFloat(b.value) : 0;
        return (aval == bval ? 0 : (aval > bval ? 1 : -1));
    } // function CompareRowOfNumbers()

    function GetDateSortingKey(format, text) {
        if (format.length < 1) { return ""; }
        format = format.toLowerCase();
        text = text.toLowerCase();
        text = text.replace(/^[^a-z0-9]*/, "");
        text = text.replace(/[^a-z0-9]*$/, "");
        if (text.length < 1) { return ""; }
        text = text.replace(/[^a-z0-9]+/g, ",");
        var date = text.split(",");
        if (date.length < 3) { return ""; }
        var d = 0, m = 0, y = 0;
        for (var i = 0; i < 3; i++) {
            var ts = format.substr(i, 1);
            if (ts == "d") { d = date[i]; }
            else if (ts == "m") { m = date[i]; }
            else if (ts == "y") { y = date[i]; }
        }
        d = d.replace(/^0/, "");
        if (d < 10) { d = "0" + d; }
        if (/[a-z]/.test(m)) {
            m = m.substr(0, 3);
            switch (m) {
                case "jan": m = String(1); break;
                case "feb": m = String(2); break;
                case "mar": m = String(3); break;
                case "apr": m = String(4); break;
                case "may": m = String(5); break;
                case "jun": m = String(6); break;
                case "jul": m = String(7); break;
                case "aug": m = String(8); break;
                case "sep": m = String(9); break;
                case "oct": m = String(10); break;
                case "nov": m = String(11); break;
                case "dec": m = String(12); break;
                default: m = String(0);
            }
        }
        m = m.replace(/^0/, "");
        if (m < 10) { m = "0" + m; }
        y = parseInt(y);
        if (y < 100) { y = parseInt(y) + 2000; }
        return "" + String(y) + "" + String(m) + "" + String(d) + "";
    }


</script>



